// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/iboware/location-history/pkg/model"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete history
	// (DELETE /location/{order_id})
	DeleteHistory(ctx echo.Context, orderId string) error
	// Returns order history
	// (GET /location/{order_id})
	GetHistory(ctx echo.Context, orderId string, params model.GetHistoryParams) error
	// Appends a location
	// (PUT /location/{order_id})
	AppendHistory(ctx echo.Context, orderId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteHistory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteHistory(ctx, orderId)
	return err
}

// GetHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params model.GetHistoryParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHistory(ctx, orderId, params)
	return err
}

// AppendHistory converts echo context to params.
func (w *ServerInterfaceWrapper) AppendHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendHistory(ctx, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/location/:order_id", wrapper.DeleteHistory)
	router.GET(baseURL+"/location/:order_id", wrapper.GetHistory)
	router.PUT(baseURL+"/location/:order_id", wrapper.AppendHistory)

}
